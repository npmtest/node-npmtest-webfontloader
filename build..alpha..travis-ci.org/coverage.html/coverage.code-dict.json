{"/home/travis/build/npmtest/node-npmtest-webfontloader/test.js":"/* istanbul instrument in package npmtest_webfontloader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webfontloader/lib.npmtest_webfontloader.js":"/* istanbul instrument in package npmtest_webfontloader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webfontloader = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webfontloader = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webfontloader/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webfontloader && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webfontloader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webfontloader\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webfontloader.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_webfontloader.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webfontloader.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_webfontloader.__dirname + '/lib.npmtest_webfontloader.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/webfontloader.js":"/* Web Font Loader v1.6.27 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a,b){this.a=a;this.m=b||a;this.c=this.m.document}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&(\"style\"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}\nfunction w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(\" \").replace(/\\s+/g,\" \").replace(/^\\s+|\\s+$/,\"\")}function y(a,b){for(var c=a.className.split(/\\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}\nfunction z(a){if(\"string\"===typeof a.f)return a.f;var b=a.m.location.protocol;\"about:\"==b&&(b=a.a.location.protocol);return\"https:\"==b?\"https:\":\"http:\"}function ea(a){return a.m.location.hostname||a.a.location.hostname}\nfunction A(a,b,c){function d(){k&&e&&f&&(k(g),k=null)}b=t(a,\"link\",{rel:\"stylesheet\",href:b,media:\"all\"});var e=!1,f=!0,g=null,k=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error(\"Stylesheet failed to load\");d()}):setTimeout(function(){e=!0;d()},0);u(a,\"head\",b)}\nfunction B(a,b,c,d){var e=a.c.getElementsByTagName(\"head\")[0];if(e){var f=t(a,\"script\",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&\"loaded\"!=this.readyState&&\"complete\"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,\"HEAD\"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error(\"Script load timeout\")))},d||5E3);return f}return null};function C(){this.a=0;this.c=null}function D(a){a.a++;return function(){a.a--;E(a)}}function F(a,b){a.c=b;E(a)}function E(a){0==a.a&&a.c&&(a.c(),a.c=null)};function G(a){this.a=a||\"-\"}G.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\\W_]+/g,\"\").toLowerCase());return b.join(this.a)};function H(a,b){this.c=a;this.f=4;this.a=\"n\";var c=(b||\"n4\").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return I(a)+\" \"+(a.f+\"00\")+\" 300px \"+J(a.c)}function J(a){var b=[];a=a.split(/,\\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['\"]/g,\"\");-1!=d.indexOf(\" \")||/^\\d/.test(d)?b.push(\"'\"+d+\"'\"):b.push(d)}return b.join(\",\")}function K(a){return a.a+a.f}function I(a){var b=\"normal\";\"o\"===a.a?b=\"oblique\":\"i\"===a.a&&(b=\"italic\");return b}\nfunction ga(a){var b=4,c=\"n\",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.m.document.documentElement;this.h=b;this.a=new G(\"-\");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c(\"wf\",\"loading\")]);L(a,\"loading\")}function M(a){if(a.g){var b=y(a.f,a.a.c(\"wf\",\"active\")),c=[],d=[a.a.c(\"wf\",\"loading\")];b||c.push(a.a.c(\"wf\",\"inactive\"));w(a.f,c,d)}L(a,\"inactive\")}function L(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,K(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function N(a,b){this.c=a;this.f=b;this.a=t(this.c,\"span\",{\"aria-hidden\":\"true\"},this.f)}function O(a){u(a.c,\"body\",a.a)}function P(a){return\"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:\"+J(a.c)+\";\"+(\"font-style:\"+I(a)+\";font-weight:\"+(a.f+\"00\")+\";\")};function Q(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}Q.prototype.start=function(){var a=this.c.m.document,b=this,c=q(),d=new Promise(function(d,e){function k(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(k,25)},function(){e()})}k()}),e=new Promise(function(a,d){setTimeout(d,b.f)});Promise.race([e,d]).then(function(){b.g(b.a)},function(){b.j(b.a)})};function R(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||\"BESbswy\";this.f={};this.w=e||3E3;this.u=f||null;this.o=this.j=this.h=this.g=null;this.g=new N(this.c,this.s);this.h=new N(this.c,this.s);this.j=new N(this.c,this.s);this.o=new N(this.c,this.s);a=new H(this.a.c+\",serif\",K(this.a));a=P(a);this.g.a.style.cssText=a;a=new H(this.a.c+\",sans-serif\",K(this.a));a=P(a);this.h.a.style.cssText=a;a=new H(\"serif\",K(this.a));a=P(a);this.j.a.style.cssText=a;a=new H(\"sans-serif\",K(this.a));a=\nP(a);this.o.a.style.cssText=a;O(this.g);O(this.h);O(this.j);O(this.o)}var S={D:\"serif\",C:\"sans-serif\"},T=null;function U(){if(null===T){var a=/AppleWebKit\\/([0-9]+)(?:\\.([0-9]+))/.exec(window.navigator.userAgent);T=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return T}R.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f[\"sans-serif\"]=this.o.a.offsetWidth;this.A=q();la(this)};\nfunction ma(a,b,c){for(var d in S)if(S.hasOwnProperty(d)&&b===a.f[S[d]]&&c===a.f[S[d]])return!0;return!1}function la(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f[\"sans-serif\"])||(d=U()&&ma(a,b,c));d?q()-a.A>=a.w?U()&&ma(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):na(a):V(a,a.v)}function na(a){setTimeout(p(function(){la(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.o.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.o=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c(\"wf\",a.c,K(a).toString(),\"active\")],[b.a.c(\"wf\",a.c,K(a).toString(),\"loading\"),b.a.c(\"wf\",a.c,K(a).toString(),\"inactive\")]);L(b,\"fontactive\",a);this.o=!0;oa(this)};\nW.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c(\"wf\",a.c,K(a).toString(),\"active\")),d=[],e=[b.a.c(\"wf\",a.c,K(a).toString(),\"loading\")];c||d.push(b.a.c(\"wf\",a.c,K(a).toString(),\"inactive\"));w(b.f,d,e)}L(b,\"fontinactive\",a);oa(this)};function oa(a){0==--a.f&&a.j&&(a.o?(a=a.a,a.g&&w(a.f,[a.a.c(\"wf\",\"active\")],[a.a.c(\"wf\",\"loading\"),a.a.c(\"wf\",\"inactive\")]),L(a,\"active\")):M(a.a))};function pa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}pa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;qa(this,new ha(this.c,a),a)};\nfunction ra(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,k=d||null||{};if(0===c.length&&f)M(b.a);else{b.f+=c.length;f&&(b.j=f);var h,m=[];for(h=0;h<c.length;h++){var l=c[h],n=k[l.c],r=b.a,x=l;r.g&&w(r.f,[r.a.c(\"wf\",x.c,K(x).toString(),\"loading\")]);L(r,\"fontloading\",x);r=null;if(null===X)if(window.FontFace){var x=/Gecko.*Firefox\\/(\\d+)/.exec(window.navigator.userAgent),ya=/OS X.*Version\\/10\\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);\nX=x?42<parseInt(x[1],10):ya?!1:!0}else X=!1;X?r=new Q(p(b.g,b),p(b.h,b),b.c,l,b.s,n):r=new R(p(b.g,b),p(b.h,b),b.c,l,b.s,a,n);m.push(r)}for(h=0;h<m.length;h++)m[h].start()}},0)}function qa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){ra(a,f,b,d,c)})};function sa(a,b){this.c=a;this.a=b}function ta(a,b,c){var d=z(a.c);a=(a.a.api||\"fast.fonts.net/jsapi\").replace(/^.*http(s?):(\\/\\/)?/,\"\");return d+\"//\"+a+\"/\"+b+\".js\"+(c?\"?v=\"+c:\"\")}\nsa.prototype.load=function(a){function b(){if(f[\"__mti_fntLst\"+d]){var c=f[\"__mti_fntLst\"+d](),e=[],h;if(c)for(var m=0;m<c.length;m++){var l=c[m].fontfamily;void 0!=c[m].fontStyle&&void 0!=c[m].fontWeight?(h=c[m].fontStyle+c[m].fontWeight,e.push(new H(l,h))):e.push(new H(l))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.m;B(this.c,ta(c,d,e),function(e){e?a([]):(f[\"__MonotypeConfiguration__\"+d]=function(){return c.a},b())}).id=\"__MonotypeAPIScript__\"+\nd}else a([])};function ua(a,b){this.c=a;this.a=b}ua.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new C;b=0;for(c=d.length;b<c;b++)A(this.c,d[b],D(g));var k=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(\":\"),d[1])for(var h=d[1].split(\",\"),m=0;m<h.length;m+=1)k.push(new H(d[0],h[m]));else k.push(new H(d[0]));F(g,function(){a(k,f)})};function va(a,b,c){a?this.c=a:this.c=b+wa;this.a=[];this.f=[];this.g=c||\"\"}var wa=\"//fonts.googleapis.com/css\";function xa(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(\":\");3==e.length&&a.f.push(e.pop());var f=\"\";2==e.length&&\"\"!=e[1]&&(f=\":\");a.a.push(e.join(f))}}\nfunction za(a){if(0==a.a.length)throw Error(\"No fonts to load!\");if(-1!=a.c.indexOf(\"kit=\"))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,\"+\"));b=a.c+\"?family=\"+c.join(\"%7C\");0<a.f.length&&(b+=\"&subset=\"+a.f.join(\",\"));0<a.g.length&&(b+=\"&text=\"+encodeURIComponent(a.g));return b};function Aa(a){this.f=a;this.a=[];this.c={}}\nvar Ba={latin:\"BESbswy\",\"latin-ext\":\"\\u00e7\\u00f6\\u00fc\\u011f\\u015f\",cyrillic:\"\\u0439\\u044f\\u0416\",greek:\"\\u03b1\\u03b2\\u03a3\",khmer:\"\\u1780\\u1781\\u1782\",Hanuman:\"\\u1780\\u1781\\u1782\"},Ca={thin:\"1\",extralight:\"2\",\"extra-light\":\"2\",ultralight:\"2\",\"ultra-light\":\"2\",light:\"3\",regular:\"4\",book:\"4\",medium:\"5\",\"semi-bold\":\"6\",semibold:\"6\",\"demi-bold\":\"6\",demibold:\"6\",bold:\"7\",\"extra-bold\":\"8\",extrabold:\"8\",\"ultra-bold\":\"8\",ultrabold:\"8\",black:\"9\",heavy:\"9\",l:\"3\",r:\"4\",b:\"7\"},Da={i:\"i\",italic:\"i\",n:\"n\",normal:\"n\"},\nEa=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;\nfunction Fa(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(\":\"),e=d[0].replace(/\\+/g,\" \"),f=[\"n4\"];if(2<=d.length){var g;var k=d[1];g=[];if(k)for(var k=k.split(\",\"),h=k.length,m=0;m<h;m++){var l;l=k[m];if(l.match(/^[\\w-]+$/)){var n=Ea.exec(l.toLowerCase());if(null==n)l=\"\";else{l=n[2];l=null==l||\"\"==l?\"n\":Da[l];n=n[1];if(null==n||\"\"==n)n=\"4\";else var r=Ca[n],n=r?r:isNaN(n)?\"4\":n.substr(0,1);l=[l,n].join(\"\")}}else l=\"\";l&&g.push(l)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(\",\"):\ng,0<d.length&&(d=Ba[d[0]])&&(a.c[e]=d))}a.c[e]||(d=Ba[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new H(e,f[d]))}};function Ga(a,b){this.c=a;this.a=b}var Ha={Arimo:!0,Cousine:!0,Tinos:!0};Ga.prototype.load=function(a){var b=new C,c=this.c,d=new va(this.a.api,z(c),this.a.text),e=this.a.families;xa(d,e);var f=new Aa(e);Fa(f);A(c,za(d),D(b));F(b,function(){a(f.a,f.c,Ha)})};function Ia(a,b){this.c=a;this.a=b}Ia.prototype.load=function(a){var b=this.a.id,c=this.c.m;b?B(this.c,(this.a.api||\"https://use.typekit.net\")+\"/\"+b+\".js\",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],k=b[f+1],h=0;h<k.length;h++)e.push(new H(g,k[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(m){}a(e)}},2E3):a([])};function Ja(a,b){this.c=a;this.f=b;this.a=[]}Ja.prototype.load=function(a){var b=this.f.id,c=this.c.m,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,k=c.fonts.length;g<k;++g){var h=c.fonts[g];d.a.push(new H(h.name,ga(\"font-weight:\"+h.weight+\";font-style:\"+h.style)))}a(d.a)},B(this.c,z(this.c)+(this.f.api||\"//f.fontdeck.com/s/css/js/\")+ea(this.c)+\"/\"+b+\".js\",function(b){b&&a([])})):a([])};var Y=new pa(window);Y.a.c.custom=function(a,b){return new ua(b,a)};Y.a.c.fontdeck=function(a,b){return new Ja(b,a)};Y.a.c.monotype=function(a,b){return new sa(b,a)};Y.a.c.typekit=function(a,b){return new Ia(b,a)};Y.a.c.google=function(a,b){return new Ga(b,a)};var Z={load:p(Y.load,Y)};\"function\"===typeof define&&define.amd?define(function(){return Z}):\"undefined\"!==typeof module&&module.exports?module.exports=Z:(window.WebFont=Z,window.WebFontConfig&&Y.load(window.WebFontConfig));}());\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/closure.js":"/* Web Font Loader v{{version}} - (c) Adobe Systems, Google. License: Apache 2.0 */\n(function(){{{source}}}());\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/core/cssclassname.js":"goog.provide('webfont.CssClassName');\n\n/**\n * Handles sanitization and construction of css class names.\n * @param {string=} opt_joinChar The character to join parts of the name on.\n *    Defaults to '-'.\n * @constructor\n */\nwebfont.CssClassName = function(opt_joinChar) {\n  /** @type {string} */\n  this.joinChar_ = opt_joinChar || webfont.CssClassName.DEFAULT_JOIN_CHAR;\n};\n\n/**\n * @const\n * @type {string}\n */\nwebfont.CssClassName.DEFAULT_JOIN_CHAR = '-';\n\ngoog.scope(function () {\n  var CssClassName = webfont.CssClassName;\n\n  /**\n   * Sanitizes a string for use as a css class name. Removes non-word and\n   * underscore characters.\n   * @param {string} name The string.\n   * @return {string} The sanitized string.\n   */\n  CssClassName.prototype.sanitize = function(name) {\n    return name.replace(/[\\W_]+/g, '').toLowerCase();\n  };\n\n  /**\n   * Builds a complete css class name given a variable number of parts.\n   * Sanitizes, then joins the parts together.\n   * @param {...string} var_args The parts to join.\n   * @return {string} The sanitized and joined string.\n   */\n  CssClassName.prototype.build = function(var_args) {\n    var parts = []\n    for (var i = 0; i < arguments.length; i++) {\n      parts.push(this.sanitize(arguments[i]));\n    }\n    return parts.join(this.joinChar_);\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/core/domhelper.js":"goog.provide('webfont.DomHelper');\n\n/**\n * Handles common DOM manipulation tasks. The aim of this library is to cover\n * the needs of typical font loading. Not more, not less.\n * @param {Window} mainWindow The main window webfontloader.js is loaded in.\n * @param {Window=} opt_loadWindow The window we'll load the font into. By\n *   default, the main window is used.\n * @constructor\n */\nwebfont.DomHelper = function(mainWindow, opt_loadWindow) {\n  this.mainWindow_ = mainWindow;\n  this.loadWindow_ = opt_loadWindow || mainWindow;\n\n  /** @type {string} */\n  this.protocol_;\n\n  /** @type {Document} */\n  this.document_ = this.loadWindow_.document;\n};\n\ngoog.scope(function () {\n  var DomHelper = webfont.DomHelper;\n\n  /**\n   * The NativeFontWatchRunnner depends on the correct and reliable\n   * |onload| event, and browsers with the native font loading API\n   * have reliable @onload support as far as we know. So we use the\n   * event for such a case and unconditionally invokes the callback\n   * otherwise.\n   *\n   * @const\n   * @type {boolean}\n   */\n  DomHelper.CAN_WAIT_STYLESHEET = !!window['FontFace'];\n\n  /**\n   * Creates an element.\n   * @param {string} elem The element type.\n   * @param {Object=} opt_attr A hash of attribute key/value pairs.\n   * @param {string=} opt_innerHtml Contents of the element.\n   * @return {Element} the new element.\n   */\n  DomHelper.prototype.createElement = function(elem, opt_attr,\n      opt_innerHtml) {\n    var domElement = this.document_.createElement(elem);\n\n    if (opt_attr) {\n      for (var attr in opt_attr) {\n        // protect against native prototype augmentations\n        if (opt_attr.hasOwnProperty(attr)) {\n          if (attr == \"style\") {\n            this.setStyle(domElement, opt_attr[attr]);\n          } else {\n            domElement.setAttribute(attr, opt_attr[attr]);\n          }\n        }\n      }\n    }\n    if (opt_innerHtml) {\n      domElement.appendChild(this.document_.createTextNode(opt_innerHtml));\n    }\n    return domElement;\n  };\n\n  /**\n   * Inserts an element into the document. This is intended for unambiguous\n   * elements such as html, body, head.\n   * @param {string} tagName The element name.\n   * @param {Element} e The element to append.\n   * @return {boolean} True if the element was inserted.\n   */\n  DomHelper.prototype.insertInto = function(tagName, e) {\n    var t = this.document_.getElementsByTagName(tagName)[0];\n\n    if (!t) { // opera allows documents without a head\n      t = document.documentElement;\n    }\n\n    // This is safer than appendChild in IE. appendChild causes random\n    // JS errors in IE. Sometimes errors in other JS exectution, sometimes\n    // complete 'This page cannot be displayed' errors. For our purposes,\n    // it's equivalent because we don't need to insert at any specific\n    // location.\n    t.insertBefore(e, t.lastChild);\n    return true;\n  };\n\n  /**\n   * Calls a function when the body tag exists.\n   * @param {function()} callback The function to call.\n   */\n  DomHelper.prototype.whenBodyExists = function(callback) {\n    var that = this;\n\n    if (that.document_.body) {\n      callback();\n    } else {\n      if (that.document_.addEventListener) {\n        that.document_.addEventListener('DOMContentLoaded', callback);\n      } else {\n        that.document_.attachEvent('onreadystatechange', function () {\n          if (that.document_.readyState == 'interactive' || that.document_.readyState == 'complete') {\n            callback();\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Removes an element from the DOM.\n   * @param {Element} node The element to remove.\n   * @return {boolean} True if the element was removed.\n   */\n  DomHelper.prototype.removeElement = function(node) {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * @deprecated Use updateClassName().\n   *\n   * Appends a name to an element's class attribute.\n   * @param {Element} e The element.\n   * @param {string} name The class name to add.\n   */\n  DomHelper.prototype.appendClassName = function(e, name) {\n    this.updateClassName(e, [name]);\n  };\n\n  /**\n   * @deprecated Use updateClassName().\n   *\n   * Removes a name to an element's class attribute.\n   * @param {Element} e The element.\n   * @param {string} name The class name to remove.\n   */\n  DomHelper.prototype.removeClassName = function(e, name) {\n    this.updateClassName(e, null, [name]);\n  };\n\n  /**\n   * Updates an element's class attribute in a single change. This\n   * allows multiple updates in a single class name change so there\n   * is no chance for a browser to relayout in between changes.\n   *\n   * @param {Element} e The element.\n   * @param {Array.<string>=} opt_add List of class names to add.\n   * @param {Array.<string>=} opt_remove List of class names to remove.\n   */\n  DomHelper.prototype.updateClassName = function (e, opt_add, opt_remove) {\n    var add = opt_add || [],\n        remove = opt_remove || [];\n\n    var classes = e.className.split(/\\s+/);\n\n    for (var i = 0; i < add.length; i += 1) {\n      var found = false;\n\n      for (var j = 0; j < classes.length; j += 1) {\n        if (add[i] === classes[j]) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        classes.push(add[i]);\n      }\n    }\n\n    var remainingClasses = [];\n\n    for (var i = 0; i < classes.length; i += 1) {\n      var found = false;\n\n      for (var j = 0; j < remove.length; j += 1) {\n        if (classes[i] === remove[j]) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        remainingClasses.push(classes[i]);\n      }\n    }\n\n    e.className = remainingClasses.join(' ')\n                    .replace(/\\s+/g, ' ')\n                    .replace(/^\\s+|\\s+$/, '');\n  };\n\n  /**\n   * Returns true if an element has a given class name and false otherwise.\n   * @param {Element} e The element.\n   * @param {string} name The class name to check for.\n   * @return {boolean} Whether or not the element has this class name.\n   */\n  DomHelper.prototype.hasClassName = function(e, name) {\n    var classes = e.className.split(/\\s+/);\n    for (var i = 0, len = classes.length; i < len; i++) {\n      if (classes[i] == name) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Sets the style attribute on an element.\n   * @param {Element} e The element.\n   * @param {string} styleString The style string.\n   */\n  DomHelper.prototype.setStyle = function(e, styleString) {\n    e.style.cssText = styleString;\n  };\n\n  /**\n   * @return {Window} The main window webfontloader.js is loaded in (for config).\n   */\n  DomHelper.prototype.getMainWindow = function() {\n    return this.mainWindow_;\n  };\n\n  /**\n   * @return {Window} The window that we're loading the font(s) into.\n   */\n  DomHelper.prototype.getLoadWindow = function() {\n    return this.loadWindow_;\n  };\n\n  /**\n   * @return {string} The protocol (http: or https:) to request resources in.\n   */\n  DomHelper.prototype.getProtocol = function() {\n    if (typeof this.protocol_ === 'string') {\n      return this.protocol_;\n    } else {\n      var protocol = this.loadWindow_.location.protocol;\n      // For empty iframes, fallback to main window's protocol.\n      if (protocol == 'about:') {\n        protocol = this.mainWindow_.location.protocol;\n      }\n      return protocol == 'https:' ? 'https:' : 'http:';\n    }\n  };\n\n  /**\n   * Explicitly set the protocol instead of automatic detection.\n   *\n   * @param {string} protocol\n   */\n  DomHelper.prototype.setProtocol = function (protocol) {\n    if (/^http(s)?:$/.test(protocol)) {\n      this.protocol_ = protocol;\n    }\n  };\n\n  /**\n   * Returns the secure status of the current document.\n   * @return {boolean} true if the current document is served securely.\n   */\n  DomHelper.prototype.isHttps = function() {\n    return this.getProtocol() === 'https:';\n  };\n\n  /**\n   * Returns the hostname of the current document.\n   * @return {string} hostname.\n   */\n  DomHelper.prototype.getHostName = function() {\n    return this.getLoadWindow().location.hostname || this.getMainWindow().location.hostname;\n  };\n\n  /**\n   * Creates a style element.\n   * @param {string} css Contents of the style element.\n   * @return {Element} a DOM element.\n   */\n  DomHelper.prototype.createStyle = function(css) {\n    var e = this.createElement('style');\n\n    e.setAttribute('type', 'text/css');\n    if (e.styleSheet) { // IE\n      e.styleSheet.cssText = css;\n    } else {\n      e.appendChild(document.createTextNode(css));\n    }\n    return e;\n  };\n\n  /**\n   * Loads an external stylesheet.\n   *\n   * @param {string} href the URL of the stylesheet\n   * @param {function(Error)=} opt_callback Called when the stylesheet has loaded or failed to\n   * load. Note that the callback is *NOT* guaranteed to be called in all browsers. The first\n   * argument to the callback is an error object that is falsy when there are no errors and\n   * truthy when there are.\n   * @param {boolean=} opt_async True if the stylesheet should be loaded asynchronously. Defaults to false.\n   * @return {Element} The link element\n   */\n  DomHelper.prototype.loadStylesheet = function (href, opt_callback, opt_async) {\n    var link = this.createElement('link', {\n      'rel': 'stylesheet',\n      'href': href,\n      'media': (opt_async ? 'only x' : 'all')\n    });\n\n    var sheets = this.document_.styleSheets,\n        eventFired = false,\n        asyncResolved = !opt_async,\n        callbackArg = null,\n        callback = opt_callback || null;\n\n    function mayInvokeCallback() {\n      if (callback && eventFired && asyncResolved) {\n        callback(callbackArg);\n        callback = null;\n      }\n    }\n\n    if (DomHelper.CAN_WAIT_STYLESHEET) {\n      link.onload = function () {\n        eventFired = true;\n        mayInvokeCallback();\n      };\n\n      link.onerror = function () {\n        eventFired = true;\n        callbackArg = new Error('Stylesheet failed to load');\n        mayInvokeCallback();\n      };\n    } else {\n      // Some callers expect opt_callback being called asynchronously.\n      setTimeout(function () {\n        eventFired = true;\n        mayInvokeCallback();\n      }, 0);\n    }\n\n    function onStylesheetAvailable(callback) {\n      for (var i = 0; i < sheets.length; i++) {\n        if (sheets[i].href && sheets[i].href.indexOf(href) !== -1) {\n          return callback();\n        }\n      }\n\n      setTimeout(function () {\n        onStylesheetAvailable(callback);\n      }, 0);\n    }\n\n    function onMediaAvailable(callback) {\n      for (var i = 0; i < sheets.length; i++) {\n        if (sheets[i].href && sheets[i].href.indexOf(href) !== -1 && sheets[i].media) {\n          /**\n           * @type {string|MediaList|null}\n           */\n          var media = sheets[i].media;\n\n          if (media === \"all\" || (media.mediaText && media.mediaText === \"all\")) {\n            return callback();\n          }\n        }\n      }\n\n      setTimeout(function () {\n        onMediaAvailable(callback);\n      }, 0);\n    }\n\n    this.insertInto('head', link);\n\n    if (opt_async) {\n      onStylesheetAvailable(function () {\n        link.media = \"all\";\n        // The media type change doesn't take effect immediately on Chrome, so\n        // we'll query the media attribute on the stylesheet until it changes\n        // to \"all\".\n        onMediaAvailable(function () {\n          asyncResolved = true;\n          mayInvokeCallback();\n        });\n      });\n    }\n\n    return link;\n  };\n\n  /**\n   * Loads an external script file.\n   * @param {string} src URL of the script.\n   * @param {function(Error)=} opt_callback callback when the script has loaded. The first argument to\n   * the callback is an error object that is falsy when there are no errors and truthy when there are.\n   * @param {number=} opt_timeout The number of milliseconds after which the callback will be called\n   * with a timeout error. Defaults to 5 seconds.\n   * @return {Element} The script element\n   */\n  DomHelper.prototype.loadScript = function(src, opt_callback, opt_timeout) {\n    var head = this.document_.getElementsByTagName('head')[0];\n\n    if (head) {\n      var script = this.createElement('script', {\n        'src': src\n      });\n      var done = false;\n      script.onload = script.onreadystatechange = function() {\n        if (!done && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {\n          done = true;\n          if (opt_callback) {\n            opt_callback(null);\n          }\n          script.onload = script.onreadystatechange = null;\n          // Avoid a bizarre issue with unclosed <base> tag in IE6 - http://blog.dotsmart.net/2008/04/\n          if (script.parentNode.tagName == 'HEAD') head.removeChild(script);\n        }\n      };\n      head.appendChild(script);\n\n      setTimeout(function () {\n        if (!done) {\n          done = true;\n          if (opt_callback) {\n            opt_callback(new Error('Script load timeout'));\n          }\n        }\n      }, opt_timeout || 5000);\n\n      return script;\n    }\n\n    return null;\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/core/eventdispatcher.js":"goog.provide('webfont.EventDispatcher');\n\ngoog.require('webfont.CssClassName');\n\n/**\n * A class to dispatch events and manage the event class names on an html\n * element that represent the current state of fonts on the page. Active class\n * names always overwrite inactive class names of the same type, while loading\n * class names may be present whenever a font is loading (regardless of if an\n * associated active or inactive class name is also present).\n *\n * @param {webfont.DomHelper} domHelper\n * @param {Object} config\n * @constructor\n */\nwebfont.EventDispatcher = function(domHelper, config) {\n  this.domHelper_ = domHelper;\n  this.htmlElement_ = domHelper.getLoadWindow().document.documentElement;\n  this.callbacks_ = config;\n  this.namespace_ = webfont.EventDispatcher.DEFAULT_NAMESPACE;\n  this.cssClassName_ = new webfont.CssClassName('-');\n  this.dispatchEvents_ = config['events'] !== false;\n  this.setClasses_ = config['classes'] !== false;\n};\n\n/**\n * @const\n * @type {string}\n */\nwebfont.EventDispatcher.DEFAULT_NAMESPACE = 'wf';\n\n/**\n * @const\n * @type {string}\n */\nwebfont.EventDispatcher.LOADING = 'loading';\n\n/**\n * @const\n * @type {string}\n */\nwebfont.EventDispatcher.ACTIVE = 'active';\n\n/**\n * @const\n * @type {string}\n */\nwebfont.EventDispatcher.INACTIVE = 'inactive';\n\n/**\n * @const\n * @type {string}\n */\nwebfont.EventDispatcher.FONT = 'font';\n\ngoog.scope(function () {\n  var EventDispatcher = webfont.EventDispatcher;\n\n  /**\n   * Dispatch the loading event and append the loading class name.\n   */\n  EventDispatcher.prototype.dispatchLoading = function() {\n    if (this.setClasses_) {\n      this.domHelper_.updateClassName(this.htmlElement_,\n        [\n          this.cssClassName_.build(this.namespace_, webfont.EventDispatcher.LOADING)\n        ]\n      );\n    }\n\n    this.dispatch_(webfont.EventDispatcher.LOADING);\n  };\n\n  /**\n   * Dispatch the font loading event and append the font loading class name.\n   * @param {webfont.Font} font\n   */\n  EventDispatcher.prototype.dispatchFontLoading = function(font) {\n    if (this.setClasses_) {\n      this.domHelper_.updateClassName(this.htmlElement_,\n        [\n          this.cssClassName_.build(this.namespace_, font.getName(), font.getVariation().toString(), webfont.EventDispatcher.LOADING)\n        ]\n      );\n    }\n\n    this.dispatch_(webfont.EventDispatcher.FONT + webfont.EventDispatcher.LOADING, font);\n  };\n\n  /**\n   * Dispatch the font active event, remove the font loading class name, remove\n   * the font inactive class name, and append the font active class name.\n   * @param {webfont.Font} font\n   */\n  EventDispatcher.prototype.dispatchFontActive = function(font) {\n    if (this.setClasses_) {\n      this.domHelper_.updateClassName(\n        this.htmlElement_,\n        [\n          this.cssClassName_.build(this.namespace_, font.getName(), font.getVariation().toString(), webfont.EventDispatcher.ACTIVE)\n        ],\n        [\n          this.cssClassName_.build(this.namespace_, font.getName(), font.getVariation().toString(), webfont.EventDispatcher.LOADING),\n          this.cssClassName_.build(this.namespace_, font.getName(), font.getVariation().toString(), webfont.EventDispatcher.INACTIVE)\n        ]\n      );\n    }\n\n    this.dispatch_(webfont.EventDispatcher.FONT + webfont.EventDispatcher.ACTIVE, font);\n  };\n\n  /**\n   * Dispatch the font inactive event, remove the font loading class name, and\n   * append the font inactive class name (unless the font active class name is\n   * already present).\n   * @param {webfont.Font} font\n   */\n  EventDispatcher.prototype.dispatchFontInactive = function(font) {\n    if (this.setClasses_) {\n      var hasFontActive = this.domHelper_.hasClassName(this.htmlElement_,\n            this.cssClassName_.build(this.namespace_, font.getName(), font.getVariation().toString(), webfont.EventDispatcher.ACTIVE)\n          ),\n          add = [],\n          remove = [\n            this.cssClassName_.build(this.namespace_, font.getName(), font.getVariation().toString(), webfont.EventDispatcher.LOADING)\n          ];\n\n      if (!hasFontActive) {\n        add.push(this.cssClassName_.build(this.namespace_, font.getName(), font.getVariation().toString(), webfont.EventDispatcher.INACTIVE));\n      }\n\n      this.domHelper_.updateClassName(this.htmlElement_, add, remove);\n    }\n\n    this.dispatch_(webfont.EventDispatcher.FONT + webfont.EventDispatcher.INACTIVE, font);\n  };\n\n  /**\n   * Dispatch the inactive event, remove the loading class name, and append the\n   * inactive class name (unless the active class name is already present).\n   */\n  EventDispatcher.prototype.dispatchInactive = function() {\n    if (this.setClasses_) {\n      var hasActive = this.domHelper_.hasClassName(this.htmlElement_,\n            this.cssClassName_.build(this.namespace_, webfont.EventDispatcher.ACTIVE)\n          ),\n          add = [],\n          remove = [\n            this.cssClassName_.build(this.namespace_, webfont.EventDispatcher.LOADING)\n          ];\n\n      if (!hasActive) {\n        add.push(this.cssClassName_.build(this.namespace_, webfont.EventDispatcher.INACTIVE));\n      }\n\n      this.domHelper_.updateClassName(this.htmlElement_, add, remove);\n    }\n\n    this.dispatch_(webfont.EventDispatcher.INACTIVE);\n  };\n\n  /**\n   * Dispatch the active event, remove the loading class name, remove the inactive\n   * class name, and append the active class name.\n   */\n  EventDispatcher.prototype.dispatchActive = function() {\n    if (this.setClasses_) {\n      this.domHelper_.updateClassName(this.htmlElement_,\n        [\n          this.cssClassName_.build(this.namespace_, webfont.EventDispatcher.ACTIVE)\n        ],\n        [\n          this.cssClassName_.build(this.namespace_, webfont.EventDispatcher.LOADING),\n          this.cssClassName_.build(this.namespace_, webfont.EventDispatcher.INACTIVE)\n        ]\n      );\n    }\n\n    this.dispatch_(webfont.EventDispatcher.ACTIVE);\n  };\n\n  /**\n   * @param {string} event\n   * @param {webfont.Font=} opt_font\n   */\n  EventDispatcher.prototype.dispatch_ = function(event, opt_font) {\n    if (this.dispatchEvents_ && this.callbacks_[event]) {\n      if (opt_font) {\n        this.callbacks_[event](opt_font.getName(), opt_font.getVariation());\n      } else {\n        this.callbacks_[event]();\n      }\n    }\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/core/font.js":"goog.provide('webfont.Font');\n\n/**\n * This class is an abstraction for a single font or typeface.\n * It contains the font name and the variation (i.e. style\n * and weight.) A collection Font instances can represent a\n * font family.\n *\n * @constructor\n * @param {string} name The font family name\n * @param {string=} opt_variation A font variation description\n */\nwebfont.Font = function (name, opt_variation) {\n  this.name_ = name;\n  this.weight_ = 4;\n  this.style_ = 'n'\n\n  var variation = opt_variation || 'n4',\n      match = variation.match(/^([nio])([1-9])$/i);\n\n  if (match) {\n    this.style_ = match[1];\n    this.weight_ = parseInt(match[2], 10);\n  }\n};\n\ngoog.scope(function () {\n  var Font = webfont.Font;\n\n  /**\n   * @return {string}\n   */\n  Font.prototype.getName = function () {\n    return this.name_;\n  };\n\n  /**\n   * @return {string}\n   */\n  Font.prototype.getCssName = function () {\n    return this.quote_(this.name_);\n  };\n\n  /**\n   * Returns a CSS string representation of the font that\n   * can be used as the CSS font property shorthand.\n   *\n   * @return {string}\n   */\n  Font.prototype.toCssString = function () {\n    return this.getCssStyle() + ' ' + this.getCssWeight() + ' 300px ' + this.getCssName();\n  };\n\n  /**\n   * @private\n   * @param {string} name\n   * @return {string}\n   */\n  Font.prototype.quote_ = function (name) {\n    var quoted = [];\n    var split = name.split(/,\\s*/);\n    for (var i = 0; i < split.length; i++) {\n      var part = split[i].replace(/['\"]/g, '');\n      if (part.indexOf(' ') == -1 && !(/^\\d/.test(part))) {\n        quoted.push(part);\n      } else {\n        quoted.push(\"'\" + part + \"'\");\n      }\n    }\n    return quoted.join(',');\n  };\n\n  /**\n   * @return {string}\n   */\n  Font.prototype.getVariation = function () {\n    return this.style_ + this.weight_;\n  };\n\n  /**\n   * @return {string}\n   */\n  Font.prototype.getCssVariation = function () {\n    return 'font-style:' + this.getCssStyle() + ';font-weight:' + this.getCssWeight() + ';';\n  };\n\n  /**\n   * @return {string}\n   */\n  Font.prototype.getCssWeight = function () {\n    return this.weight_ + '00';\n  };\n\n  /**\n   * @return {string}\n   */\n  Font.prototype.getCssStyle = function () {\n    var style = 'normal';\n\n    if (this.style_ === 'o') {\n      style = 'oblique';\n    } else if (this.style_ === 'i') {\n      style = 'italic';\n    }\n\n    return style;\n  };\n\n  /**\n   * Parses a CSS font declaration and returns a font\n   * variation description.\n   *\n   * @param {string} css\n   * @return {string}\n   */\n  Font.parseCssVariation = function (css) {\n    var weight = 4,\n        style = 'n',\n        m = null;\n\n    if (css) {\n      m = css.match(/(normal|oblique|italic)/i);\n\n      if (m && m[1]) {\n        style = m[1].substr(0, 1).toLowerCase();\n      }\n\n      m = css.match(/([1-9]00|normal|bold)/i);\n\n      if (m && m[1]) {\n        if (/bold/i.test(m[1])) {\n          weight = 7;\n        } else if (/[1-9]00/.test(m[1])) {\n          weight = parseInt(m[1].substr(0, 1), 10);\n        }\n      }\n    }\n    return style + weight;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/core/fontmodule.js":"goog.provide('webfont.FontModule');\n\n/**\n * @interface\n */\nwebfont.FontModule = function () {};\n\ngoog.scope(function () {\n  var FontModule = webfont.FontModule;\n\n  /**\n   * @param {function(Array.<webfont.Font>,  webfont.FontTestStrings=, Object.<string, boolean>=)} onReady\n   */\n  FontModule.prototype.load = function (onReady) {};\n});\n\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/core/fontmoduleloader.js":"goog.provide('webfont.FontModuleLoader');\ngoog.provide('webfont.FontModuleFactory');\n\n/** @typedef {function(Object, webfont.DomHelper): webfont.FontModule} */\nwebfont.FontModuleFactory;\n\n/**\n * @constructor\n */\nwebfont.FontModuleLoader = function() {\n  /**\n   * @type {Object.<string, webfont.FontModuleFactory>}\n   */\n  this.modules_ = {};\n};\n\ngoog.scope(function () {\n  var FontModuleLoader = webfont.FontModuleLoader;\n\n  /**\n   * @param {string} name\n   * @param {webfont.FontModuleFactory} factory\n   */\n  FontModuleLoader.prototype.addModuleFactory = function(name, factory) {\n    this.modules_[name] = factory;\n  };\n\n  /**\n   * @param {Object} configuration\n   * @param {webfont.DomHelper} domHelper\n   * @return {Array.<webfont.FontModule>}\n   */\n  FontModuleLoader.prototype.getModules = function(configuration, domHelper) {\n    var modules = [];\n\n    for (var key in configuration) {\n      if (configuration.hasOwnProperty(key)) {\n        var moduleFactory = this.modules_[key];\n\n        if (moduleFactory) {\n          modules.push(moduleFactory(configuration[key], domHelper));\n        }\n      }\n    }\n    return modules;\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/core/fontruler.js":"goog.provide('webfont.FontRuler');\n\n/**\n * An element that can be used to measure the metrics\n * of a given font and string.\n * @constructor\n * @param {webfont.DomHelper} domHelper\n * @param {string} fontTestString\n */\nwebfont.FontRuler = function (domHelper, fontTestString) {\n  this.domHelper_ = domHelper;\n  this.fontTestString_ = fontTestString;\n  this.el_ = this.domHelper_.createElement('span', {\n    \"aria-hidden\": \"true\"\n  }, this.fontTestString_);\n};\n\ngoog.scope(function () {\n  var FontRuler = webfont.FontRuler;\n\n  /**\n   * @param {webfont.Font} font\n   */\n  FontRuler.prototype.setFont = function(font) {\n    this.domHelper_.setStyle(this.el_, this.computeStyleString_(font));\n  };\n\n  /**\n   * Inserts the ruler into the DOM.\n   */\n  FontRuler.prototype.insert = function() {\n    this.domHelper_.insertInto('body', this.el_);\n  };\n\n  /**\n   * @private\n   * @param {webfont.Font} font\n   * @return {string}\n   */\n  FontRuler.prototype.computeStyleString_ = function(font) {\n    return \"display:block;position:absolute;top:-9999px;left:-9999px;\" +\n           \"font-size:300px;width:auto;height:auto;line-height:normal;margin:0;\" +\n           \"padding:0;font-variant:normal;white-space:nowrap;font-family:\" +\n           font.getCssName() + \";\" + font.getCssVariation();\n  };\n\n  /**\n   * @return {number}\n   */\n  FontRuler.prototype.getWidth = function() {\n    return this.el_.offsetWidth;\n  };\n\n  /**\n   * Removes the ruler element from the DOM.\n   */\n  FontRuler.prototype.remove = function() {\n    this.domHelper_.removeElement(this.el_);\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/core/fontwatcher.js":"goog.provide('webfont.FontWatcher');\n\ngoog.require('webfont.FontWatchRunner');\ngoog.require('webfont.NativeFontWatchRunner');\n\n/**\n * @typedef {Object.<string, Array.<string>>}\n */\nwebfont.FontTestStrings;\n\n/**\n * @constructor\n * @param {webfont.DomHelper} domHelper\n * @param {webfont.EventDispatcher} eventDispatcher\n * @param {number=} opt_timeout\n */\nwebfont.FontWatcher = function(domHelper, eventDispatcher, opt_timeout) {\n  this.domHelper_ = domHelper;\n  this.eventDispatcher_ = eventDispatcher;\n  this.currentlyWatched_ = 0;\n  this.last_ = false;\n  this.success_ = false;\n  this.timeout_ = opt_timeout;\n};\n\ngoog.scope(function () {\n  var FontWatcher = webfont.FontWatcher,\n      FontWatchRunner = webfont.FontWatchRunner,\n      NativeFontWatchRunner = webfont.NativeFontWatchRunner;\n\n  /**\n   * @type {null|boolean}\n   */\n  FontWatcher.SHOULD_USE_NATIVE_LOADER = null;\n\n  /**\n   * @return {string}\n   */\n  FontWatcher.getUserAgent = function () {\n    return window.navigator.userAgent;\n  };\n\n  /**\n   * @return {string}\n   */\n  FontWatcher.getVendor = function () {\n    return window.navigator.vendor;\n  };\n\n  /**\n   * Returns true if this browser has support for\n   * the CSS font loading API.\n   *\n   * @return {boolean}\n   */\n  FontWatcher.shouldUseNativeLoader = function () {\n    if (FontWatcher.SHOULD_USE_NATIVE_LOADER === null) {\n      if (!!window.FontFace) {\n        var match = /Gecko.*Firefox\\/(\\d+)/.exec(FontWatcher.getUserAgent());\n        var safari10Match = /OS X.*Version\\/10\\..*Safari/.exec(FontWatcher.getUserAgent()) && /Apple/.exec(FontWatcher.getVendor());\n\n        if (match) {\n          FontWatcher.SHOULD_USE_NATIVE_LOADER = parseInt(match[1], 10) > 42;\n        } else if (safari10Match) {\n          FontWatcher.SHOULD_USE_NATIVE_LOADER = false;\n        } else {\n          FontWatcher.SHOULD_USE_NATIVE_LOADER = true;\n        }\n      } else {\n        FontWatcher.SHOULD_USE_NATIVE_LOADER = false;\n      }\n    }\n    return FontWatcher.SHOULD_USE_NATIVE_LOADER;\n  };\n\n  /**\n   * Watches a set of font families.\n   * @param {Array.<webfont.Font>} fonts The fonts to watch.\n   * @param {webfont.FontTestStrings} fontTestStrings The font test strings for\n   *     each family.\n   * @param {Object.<String, boolean>} metricCompatibleFonts\n   * @param {boolean} last True if this is the last set of fonts to watch.\n   */\n  FontWatcher.prototype.watchFonts = function(fonts,\n      fontTestStrings, metricCompatibleFonts, last) {\n    var length = fonts.length,\n        testStrings = fontTestStrings || {};\n\n    if (length === 0 && last) {\n      this.eventDispatcher_.dispatchInactive();\n      return;\n    }\n\n    this.currentlyWatched_ += fonts.length;\n\n    if (last) {\n      this.last_ = last;\n    }\n\n    var i, fontWatchRunners = [];\n    for (i = 0; i < fonts.length; i++) {\n      var font = fonts[i],\n          testString = testStrings[font.getName()];\n\n      this.eventDispatcher_.dispatchFontLoading(font);\n\n      var fontWatchRunner = null;\n\n      if (FontWatcher.shouldUseNativeLoader()) {\n        fontWatchRunner = new NativeFontWatchRunner(\n            goog.bind(this.fontActive_, this),\n            goog.bind(this.fontInactive_, this),\n            this.domHelper_,\n            font,\n            this.timeout_,\n            testString\n          );\n      } else {\n        fontWatchRunner = new FontWatchRunner(\n          goog.bind(this.fontActive_, this),\n          goog.bind(this.fontInactive_, this),\n          this.domHelper_,\n          font,\n          this.timeout_,\n          metricCompatibleFonts,\n          testString\n        );\n      }\n\n      fontWatchRunners.push(fontWatchRunner);\n    }\n\n    for (i = 0; i < fontWatchRunners.length; i++) {\n      fontWatchRunners[i].start();\n    }\n  };\n\n  /**\n   * Called by a FontWatchRunner when a font has been detected as active.\n   * @param {webfont.Font} font\n   * @private\n   */\n  FontWatcher.prototype.fontActive_ = function(font) {\n    this.eventDispatcher_.dispatchFontActive(font);\n    this.success_ = true;\n    this.decreaseCurrentlyWatched_();\n  };\n\n  /**\n   * Called by a FontWatchRunner when a font has been detected as inactive.\n   * @param {webfont.Font} font\n   * @private\n   */\n  FontWatcher.prototype.fontInactive_ = function(font) {\n    this.eventDispatcher_.dispatchFontInactive(font);\n    this.decreaseCurrentlyWatched_();\n  };\n\n  /**\n   * @private\n   */\n  FontWatcher.prototype.decreaseCurrentlyWatched_ = function() {\n    if (--this.currentlyWatched_ == 0 && this.last_) {\n      if (this.success_) {\n        this.eventDispatcher_.dispatchActive();\n      } else {\n        this.eventDispatcher_.dispatchInactive();\n      }\n    }\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/core/fontwatchrunner.js":"goog.provide('webfont.FontWatchRunner');\n\ngoog.require('webfont.Font');\ngoog.require('webfont.FontRuler');\n\n/**\n * @constructor\n * @param {function(webfont.Font)} activeCallback\n * @param {function(webfont.Font)} inactiveCallback\n * @param {webfont.DomHelper} domHelper\n * @param {webfont.Font} font\n * @param {number=} opt_timeout\n * @param {Object.<string, boolean>=} opt_metricCompatibleFonts\n * @param {string=} opt_fontTestString\n */\nwebfont.FontWatchRunner = function(activeCallback, inactiveCallback, domHelper,\n    font, opt_timeout, opt_metricCompatibleFonts, opt_fontTestString) {\n  this.activeCallback_ = activeCallback;\n  this.inactiveCallback_ = inactiveCallback;\n  this.domHelper_ = domHelper;\n  this.font_ = font;\n  this.fontTestString_ = opt_fontTestString || webfont.FontWatchRunner.DEFAULT_TEST_STRING;\n  this.lastResortWidths_ = {};\n  this.timeout_ = opt_timeout || 3000;\n\n  this.metricCompatibleFonts_ = opt_metricCompatibleFonts || null;\n\n  this.fontRulerA_ = null;\n  this.fontRulerB_ = null;\n  this.lastResortRulerA_ = null;\n  this.lastResortRulerB_ = null;\n\n  this.setupRulers_();\n};\n\n/**\n * @enum {string}\n * @const\n */\nwebfont.FontWatchRunner.LastResortFonts = {\n  SERIF: 'serif',\n  SANS_SERIF: 'sans-serif'\n};\n\n/**\n * Default test string. Characters are chosen so that their widths vary a lot\n * between the fonts in the default stacks. We want each fallback stack\n * to always start out at a different width than the other.\n * @type {string}\n * @const\n */\nwebfont.FontWatchRunner.DEFAULT_TEST_STRING = 'BESbswy';\n\ngoog.scope(function () {\n  var FontWatchRunner = webfont.FontWatchRunner,\n      Font = webfont.Font,\n      FontRuler = webfont.FontRuler;\n\n  /**\n   * @type {null|boolean}\n   */\n  FontWatchRunner.HAS_WEBKIT_FALLBACK_BUG = null;\n\n  /**\n   * @return {string}\n   */\n  FontWatchRunner.getUserAgent = function () {\n    return window.navigator.userAgent;\n  };\n\n  /**\n   * Returns true if this browser is WebKit and it has the fallback bug\n   * which is present in WebKit 536.11 and earlier.\n   *\n   * @return {boolean}\n   */\n  FontWatchRunner.hasWebKitFallbackBug = function () {\n    if (FontWatchRunner.HAS_WEBKIT_FALLBACK_BUG === null) {\n      var match = /AppleWebKit\\/([0-9]+)(?:\\.([0-9]+))/.exec(FontWatchRunner.getUserAgent());\n\n      FontWatchRunner.HAS_WEBKIT_FALLBACK_BUG = !!match &&\n                                          (parseInt(match[1], 10) < 536 ||\n                                           (parseInt(match[1], 10) === 536 &&\n                                            parseInt(match[2], 10) <= 11));\n    }\n    return FontWatchRunner.HAS_WEBKIT_FALLBACK_BUG;\n  };\n\n  /**\n   * @private\n   */\n  FontWatchRunner.prototype.setupRulers_ = function() {\n    this.fontRulerA_ = new FontRuler(this.domHelper_, this.fontTestString_);\n    this.fontRulerB_ = new FontRuler(this.domHelper_, this.fontTestString_);\n    this.lastResortRulerA_ = new FontRuler(this.domHelper_, this.fontTestString_);\n    this.lastResortRulerB_ = new FontRuler(this.domHelper_, this.fontTestString_);\n\n    this.fontRulerA_.setFont(new Font(this.font_.getName() + ',' + FontWatchRunner.LastResortFonts.SERIF, this.font_.getVariation()));\n    this.fontRulerB_.setFont(new Font(this.font_.getName() + ',' + FontWatchRunner.LastResortFonts.SANS_SERIF, this.font_.getVariation()));\n    this.lastResortRulerA_.setFont(new Font(FontWatchRunner.LastResortFonts.SERIF, this.font_.getVariation()));\n    this.lastResortRulerB_.setFont(new Font(FontWatchRunner.LastResortFonts.SANS_SERIF, this.font_.getVariation()));\n\n    this.fontRulerA_.insert();\n    this.fontRulerB_.insert();\n    this.lastResortRulerA_.insert();\n    this.lastResortRulerB_.insert();\n  };\n\n  FontWatchRunner.prototype.start = function() {\n    this.lastResortWidths_[FontWatchRunner.LastResortFonts.SERIF] = this.lastResortRulerA_.getWidth();\n    this.lastResortWidths_[FontWatchRunner.LastResortFonts.SANS_SERIF] = this.lastResortRulerB_.getWidth();\n\n    this.started_ = goog.now();\n\n    this.check_();\n  };\n\n  /**\n   * Returns true if the given width matches the generic font family width.\n   *\n   * @private\n   * @param {number} width\n   * @param {string} lastResortFont\n   * @return {boolean}\n   */\n  FontWatchRunner.prototype.widthMatches_ = function(width, lastResortFont) {\n    return width === this.lastResortWidths_[lastResortFont];\n  };\n\n  /**\n   * Return true if the given widths match any of the generic font family\n   * widths.\n   *\n   * @private\n   * @param {number} a\n   * @param {number} b\n   * @return {boolean}\n   */\n  FontWatchRunner.prototype.widthsMatchLastResortWidths_ = function(a, b) {\n    for (var font in FontWatchRunner.LastResortFonts) {\n      if (FontWatchRunner.LastResortFonts.hasOwnProperty(font)) {\n        if (this.widthMatches_(a, FontWatchRunner.LastResortFonts[font]) &&\n            this.widthMatches_(b, FontWatchRunner.LastResortFonts[font])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * @private\n   * Returns true if the loading has timed out.\n   * @return {boolean}\n   */\n  FontWatchRunner.prototype.hasTimedOut_ = function() {\n    return goog.now() - this.started_ >= this.timeout_;\n  };\n\n  /**\n   * Returns true if both fonts match the normal fallback fonts.\n   *\n   * @private\n   * @param {number} a\n   * @param {number} b\n   * @return {boolean}\n   */\n  FontWatchRunner.prototype.isFallbackFont_ = function (a, b) {\n    return this.widthMatches_(a, FontWatchRunner.LastResortFonts.SERIF) &&\n           this.widthMatches_(b, FontWatchRunner.LastResortFonts.SANS_SERIF);\n  };\n\n  /**\n   * Returns true if the WebKit bug is present and both widths match a last resort font.\n   *\n   * @private\n   * @param {number} a\n   * @param {number} b\n   * @return {boolean}\n   */\n  FontWatchRunner.prototype.isLastResortFont_ = function (a, b) {\n    return FontWatchRunner.hasWebKitFallbackBug() && this.widthsMatchLastResortWidths_(a, b);\n  };\n\n  /**\n   * Returns true if the current font is metric compatible. Also returns true\n   * if we do not have a list of metric compatible fonts.\n   *\n   * @private\n   * @return {boolean}\n   */\n  FontWatchRunner.prototype.isMetricCompatibleFont_ = function () {\n    return this.metricCompatibleFonts_ === null || this.metricCompatibleFonts_.hasOwnProperty(this.font_.getName());\n  };\n\n  /**\n   * Checks the width of the two spans against their original widths during each\n   * async loop. If the width of one of the spans is different than the original\n   * width, then we know that the font is rendering and finish with the active\n   * callback. If we wait more than 5 seconds and nothing has changed, we finish\n   * with the inactive callback.\n   *\n   * @private\n   */\n  FontWatchRunner.prototype.check_ = function() {\n    var widthA = this.fontRulerA_.getWidth();\n    var widthB = this.fontRulerB_.getWidth();\n\n    if (this.isFallbackFont_(widthA, widthB) || this.isLastResortFont_(widthA, widthB)) {\n      if (this.hasTimedOut_()) {\n        if (this.isLastResortFont_(widthA, widthB) && this.isMetricCompatibleFont_()) {\n          this.finish_(this.activeCallback_);\n        } else {\n          this.finish_(this.inactiveCallback_);\n        }\n     } else {\n        this.asyncCheck_();\n      }\n    } else {\n      this.finish_(this.activeCallback_);\n    }\n  };\n\n  /**\n   * @private\n   */\n  FontWatchRunner.prototype.asyncCheck_ = function() {\n    setTimeout(goog.bind(function () {\n      this.check_();\n    }, this), 50);\n  };\n\n  /**\n   * @private\n   * @param {function(webfont.Font)} callback\n   */\n  FontWatchRunner.prototype.finish_ = function(callback) {\n    // Remove elements and trigger callback (which adds active/inactive class) asynchronously to avoid reflow chain if\n    // several fonts are finished loading right after each other\n    setTimeout(goog.bind(function () {\n      this.fontRulerA_.remove();\n      this.fontRulerB_.remove();\n      this.lastResortRulerA_.remove();\n      this.lastResortRulerB_.remove();\n      callback(this.font_);\n    }, this), 0);\n  };\n\n});\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/core/initialize.js":"goog.provide('webfont');\n\ngoog.require('webfont.WebFont');\n\ngoog.require('webfont.modules.Typekit');\ngoog.require('webfont.modules.Fontdeck');\ngoog.require('webfont.modules.Monotype');\ngoog.require('webfont.modules.Custom');\ngoog.require('webfont.modules.google.GoogleFontApi');\n\n/**\n * @define {boolean}\n */\nvar INCLUDE_CUSTOM_MODULE = false;\n\n/**\n * @define {boolean}\n */\nvar INCLUDE_FONTDECK_MODULE = false;\n\n/**\n * @define {boolean}\n */\nvar INCLUDE_MONOTYPE_MODULE = false;\n\n/**\n * @define {boolean}\n */\nvar INCLUDE_TYPEKIT_MODULE = false;\n\n/**\n * @define {boolean}\n */\nvar INCLUDE_GOOGLE_MODULE = false;\n\n/**\n * @define {string}\n */\nvar WEBFONT = 'WebFont';\n\n/**\n * @define {string}\n */\nvar WEBFONT_CONFIG = 'WebFontConfig';\n\n/**\n * @type {webfont.WebFont}\n */\nvar webFontLoader = new webfont.WebFont(window);\n\nif (INCLUDE_CUSTOM_MODULE) {\n  webFontLoader.addModule(webfont.modules.Custom.NAME, function (configuration, domHelper) {\n    return new webfont.modules.Custom(domHelper, configuration);\n  });\n}\n\nif (INCLUDE_FONTDECK_MODULE) {\n  webFontLoader.addModule(webfont.modules.Fontdeck.NAME, function (configuration, domHelper) {\n    return new webfont.modules.Fontdeck(domHelper, configuration);\n  });\n}\n\nif (INCLUDE_MONOTYPE_MODULE) {\n  webFontLoader.addModule(webfont.modules.Monotype.NAME, function (configuration, domHelper) {\n    return new webfont.modules.Monotype(domHelper, configuration);\n  });\n}\n\nif (INCLUDE_TYPEKIT_MODULE) {\n  webFontLoader.addModule(webfont.modules.Typekit.NAME, function (configuration, domHelper) {\n    return new webfont.modules.Typekit(domHelper, configuration);\n  });\n}\n\nif (INCLUDE_GOOGLE_MODULE) {\n  webFontLoader.addModule(webfont.modules.google.GoogleFontApi.NAME, function (configuration, domHelper) {\n    return new webfont.modules.google.GoogleFontApi(domHelper, configuration);\n  });\n}\n\nvar exports = {\n  'load': goog.bind(webFontLoader.load, webFontLoader)\n};\n\nif (typeof define === \"function\" && define.amd) {\n  define(function () {\n    return exports;\n  });\n} else if (typeof module !== \"undefined\" && module.exports) {\n  module.exports = exports;\n} else {\n  window[WEBFONT] = exports;\n\n  if (window[WEBFONT_CONFIG]) {\n    webFontLoader.load(window[WEBFONT_CONFIG]);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/core/nativefontwatchrunner.js":"goog.provide('webfont.NativeFontWatchRunner');\n\ngoog.require('webfont.Font');\n\ngoog.scope(function () {\n  /**\n  * @constructor\n  * @param {function(webfont.Font)} activeCallback\n  * @param {function(webfont.Font)} inactiveCallback\n  * @param {webfont.DomHelper} domHelper\n  * @param {webfont.Font} font\n  * @param {number=} opt_timeout\n  * @param {string=} opt_fontTestString\n  */\n  webfont.NativeFontWatchRunner = function(activeCallback, inactiveCallback, domHelper, font, opt_timeout, opt_fontTestString) {\n    this.activeCallback_ = activeCallback;\n    this.inactiveCallback_ = inactiveCallback;\n    this.font_ = font;\n    this.domHelper_ = domHelper;\n    this.timeout_ = opt_timeout || 3000;\n    this.fontTestString_ = opt_fontTestString || undefined;\n  };\n\n  var NativeFontWatchRunner = webfont.NativeFontWatchRunner;\n\n  NativeFontWatchRunner.prototype.start = function () {\n    var doc = this.domHelper_.getLoadWindow().document,\n        that = this;\n\n    var start = goog.now();\n\n    var loader = new Promise(function (resolve, reject) {\n      var check = function () {\n        var now = goog.now();\n\n        if (now - start >= that.timeout_) {\n          reject();\n        } else {\n          doc.fonts.load(that.font_.toCssString(), that.fontTestString_).then(function (fonts) {\n            if (fonts.length >= 1) {\n              resolve();\n            } else {\n              setTimeout(check, 25);\n            }\n          }, function () {\n            reject();\n          });\n        }\n      };\n\n      check();\n    });\n\n    var timer = new Promise(function (resolve, reject) {\n      setTimeout(reject, that.timeout_);\n    });\n\n    Promise.race([timer, loader]).then(function () {\n      that.activeCallback_(that.font_);\n    }, function () {\n      that.inactiveCallback_(that.font_);\n    });\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/core/stylesheetwaiter.js":"goog.provide('webfont.StyleSheetWaiter');\n\n/**\n * A utility class for handling callback from DomHelper.loadStylesheet().\n *\n * @constructor\n */\nwebfont.StyleSheetWaiter = function() {\n  /** @private @type {number} */\n  this.waitingCount_ = 0;\n  /** @private @type {Function} */\n  this.onReady_ = null;\n};\n\ngoog.scope(function () {\n  var StyleSheetWaiter = webfont.StyleSheetWaiter;\n\n  /**\n   * @return {function(Error)}\n   */\n  StyleSheetWaiter.prototype.startWaitingLoad = function() {\n    var self = this;\n    self.waitingCount_++;\n    return function(error) {\n      self.waitingCount_--;\n      self.fireIfReady_();\n    };\n  };\n\n  /**\n   * @param {Function} fn\n   */\n  StyleSheetWaiter.prototype.waitWhileNeededThen = function(fn) {\n    this.onReady_ = fn;\n    this.fireIfReady_();\n  };\n\n  /**\n   * @private\n   */\n  StyleSheetWaiter.prototype.fireIfReady_ = function() {\n    var isReady = 0 == this.waitingCount_;\n    if (isReady && this.onReady_) {\n      this.onReady_();\n      this.onReady_ = null;\n    }\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/core/webfont.js":"goog.provide('webfont.WebFont');\n\ngoog.require('webfont.DomHelper');\ngoog.require('webfont.EventDispatcher');\ngoog.require('webfont.FontWatcher');\ngoog.require('webfont.FontModuleLoader');\n\n/**\n * @param {Window} mainWindow The main application window containing\n *   webfontloader.js.\n * @constructor\n */\nwebfont.WebFont = function(mainWindow) {\n  this.mainWindow_ = mainWindow;\n  this.fontModuleLoader_ = new webfont.FontModuleLoader();\n  this.moduleLoading_ = 0;\n  this.events_ = true;\n  this.classes_ = true;\n};\n\ngoog.scope(function () {\n  var WebFont = webfont.WebFont,\n      DomHelper = webfont.DomHelper,\n      EventDispatcher = webfont.EventDispatcher,\n      FontWatcher = webfont.FontWatcher;\n\n  /**\n   * @param {string} name\n   * @param {webfont.FontModuleFactory} factory\n   */\n  WebFont.prototype.addModule = function(name, factory) {\n    this.fontModuleLoader_.addModuleFactory(name, factory);\n  };\n\n  /**\n   * @param {Object} configuration\n   */\n  WebFont.prototype.load = function(configuration) {\n    var context = configuration['context'] || this.mainWindow_;\n    this.domHelper_ = new DomHelper(this.mainWindow_, context);\n\n    this.events_ = configuration['events'] !== false;\n    this.classes_ = configuration['classes'] !== false;\n\n    var eventDispatcher = new EventDispatcher(\n        this.domHelper_,\n        configuration\n    );\n\n    this.load_(eventDispatcher, configuration);\n  };\n\n  /**\n   * @param {webfont.EventDispatcher} eventDispatcher\n   * @param {webfont.FontWatcher} fontWatcher\n   * @param {Array.<webfont.Font>} fonts\n   * @param {webfont.FontTestStrings=} opt_fontTestStrings\n   * @param {Object.<string, boolean>=} opt_metricCompatibleFonts\n   */\n  WebFont.prototype.onModuleReady_ = function(eventDispatcher, fontWatcher, fonts, opt_fontTestStrings, opt_metricCompatibleFonts) {\n    var allModulesLoaded = --this.moduleLoading_ == 0;\n\n    if (this.classes_ || this.events_) {\n      setTimeout(function () {\n        fontWatcher.watchFonts(fonts, opt_fontTestStrings || null, opt_metricCompatibleFonts || null, allModulesLoaded);\n      }, 0);\n    }\n  };\n\n  /**\n   * @param {webfont.EventDispatcher} eventDispatcher\n   * @param {Object} configuration\n   */\n  WebFont.prototype.load_ = function(eventDispatcher, configuration) {\n    var modules = [],\n        timeout = configuration['timeout'],\n        self = this;\n\n    // Immediately dispatch the loading event before initializing the modules\n    // so we know for sure that the loading event is synchronous.\n    eventDispatcher.dispatchLoading();\n\n    modules = this.fontModuleLoader_.getModules(configuration, this.domHelper_);\n\n    var fontWatcher = new webfont.FontWatcher(this.domHelper_, eventDispatcher, timeout);\n\n    this.moduleLoading_ = modules.length;\n\n    for (var i = 0, len = modules.length; i < len; i++) {\n      var module = modules[i];\n\n      module.load(function (fonts, opt_fontTestStrings, opt_metricCompatibleFonts) {\n        self.onModuleReady_(eventDispatcher, fontWatcher, fonts, opt_fontTestStrings, opt_metricCompatibleFonts);\n      });\n    }\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/modules/custom.js":"goog.provide('webfont.modules.Custom');\n\ngoog.require('webfont.Font');\ngoog.require('webfont.StyleSheetWaiter');\n\n/**\n *\n * WebFont.load({\n *   custom: {\n *     families: ['Font1', 'Font2'],\n *    urls: [ 'http://moo', 'http://meuh' ] }\n * });\n *\n * @constructor\n * @implements {webfont.FontModule}\n */\nwebfont.modules.Custom = function(domHelper, configuration) {\n  this.domHelper_ = domHelper;\n  this.configuration_ = configuration;\n};\n\n/**\n * @const\n * @type {string}\n */\nwebfont.modules.Custom.NAME = 'custom';\n\ngoog.scope(function () {\n  var Custom = webfont.modules.Custom,\n      Font = webfont.Font,\n      StyleSheetWaiter = webfont.StyleSheetWaiter;\n\n  Custom.prototype.load = function(onReady) {\n    var i, len;\n    var urls = this.configuration_['urls'] || [];\n    var familiesConfiguration = this.configuration_['families'] || [];\n    var fontTestStrings = this.configuration_['testStrings'] || {};\n    var waiter = new StyleSheetWaiter();\n    for (i = 0, len = urls.length; i < len; i++) {\n      this.domHelper_.loadStylesheet(urls[i], waiter.startWaitingLoad());\n    }\n\n    var fonts = [];\n\n    for (i = 0, len = familiesConfiguration.length; i < len; i++) {\n      var components = familiesConfiguration[i].split(\":\");\n\n      if (components[1]) {\n        var variations = components[1].split(\",\");\n\n        for (var j = 0; j < variations.length; j += 1) {\n          fonts.push(new Font(components[0], variations[j]));\n        }\n      } else {\n        fonts.push(new Font(components[0]));\n      }\n    }\n\n    waiter.waitWhileNeededThen(function() {\n      onReady(fonts, fontTestStrings);\n    });\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/modules/fontdeck.js":"goog.provide('webfont.modules.Fontdeck');\n\ngoog.require('webfont.Font');\n\n/**\n * @constructor\n * @implements {webfont.FontModule}\n */\nwebfont.modules.Fontdeck = function(domHelper, configuration) {\n  this.domHelper_ = domHelper;\n  this.configuration_ = configuration;\n  this.fonts_ = [];\n};\n\n/**\n * @const\n * @type {string}\n */\nwebfont.modules.Fontdeck.NAME = 'fontdeck';\nwebfont.modules.Fontdeck.HOOK = '__webfontfontdeckmodule__';\nwebfont.modules.Fontdeck.API = '//f.fontdeck.com/s/css/js/';\n\ngoog.scope(function () {\n  var Fontdeck = webfont.modules.Fontdeck,\n      Font = webfont.Font,\n      FontVariationDescription = webfont.FontVariationDescription;\n\n  Fontdeck.prototype.getScriptSrc = function(projectId) {\n    var protocol = this.domHelper_.getProtocol();\n    // For empty iframes, fall back to main window's hostname.\n    var hostname = this.domHelper_.getHostName();\n    var api = this.configuration_['api'] || webfont.modules.Fontdeck.API;\n    return protocol + api + hostname + '/' + projectId + '.js';\n  };\n\n  Fontdeck.prototype.load = function(onReady) {\n    var projectId = this.configuration_['id'];\n    var loadWindow = this.domHelper_.getLoadWindow();\n    var self = this;\n\n    if (projectId) {\n      // Provide data to Fontdeck for processing.\n      if (!loadWindow[webfont.modules.Fontdeck.HOOK]) {\n        loadWindow[webfont.modules.Fontdeck.HOOK] = {};\n      }\n\n      // Fontdeck will call this function to indicate support status\n      // and what fonts are provided.\n      loadWindow[webfont.modules.Fontdeck.HOOK][projectId] = function(fontdeckSupports, data) {\n        for (var i = 0, j = data['fonts'].length; i<j; ++i) {\n          var font = data['fonts'][i];\n          self.fonts_.push(new Font(font['name'], Font.parseCssVariation('font-weight:' + font['weight'] + ';font-style:' + font['style'])));\n        }\n        onReady(self.fonts_);\n      };\n\n      // Call the Fontdeck API.\n      this.domHelper_.loadScript(this.getScriptSrc(projectId), function (err) {\n        if (err) {\n          onReady([]);\n        }\n      });\n    } else {\n      onReady([]);\n    }\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/modules/monotype.js":"goog.provide('webfont.modules.Monotype');\n\ngoog.require('webfont.Font');\n\n/**\nwebfont.load({\n  monotype: {\n    projectId: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'//this is your Fonts.com Web fonts projectId\n  }\n});\n*/\n\n/**\n * @constructor\n * @implements {webfont.FontModule}\n */\nwebfont.modules.Monotype = function(domHelper, configuration) {\n  this.domHelper_ = domHelper;\n  this.configuration_ = configuration;\n};\n\n/**\n * name of the module through which external API is supposed to call the MonotypeFontAPI.\n *\n * @const\n * @type {string}\n */\nwebfont.modules.Monotype.NAME = 'monotype';\n\n/**\n * __mti_fntLst is the name of function that exposes Monotype's font list.\n * @const\n */\nwebfont.modules.Monotype.HOOK = '__mti_fntLst';\n\n/**\n * __MonotypeAPIScript__ is the id of script added by google API. Currently 'fonts.com' supports only one script in a page.\n * This may require change in future if 'fonts.com' begins supporting multiple scripts per page.\n * @const\n */\nwebfont.modules.Monotype.SCRIPTID = '__MonotypeAPIScript__';\n\n/**\n * __MonotypeConfiguration__ is function exposed to fonts.com. fonts.com will use this function to get webfontloader configuration\n * @const\n */\nwebfont.modules.Monotype.CONFIGURATION = '__MonotypeConfiguration__';\n\ngoog.scope(function() {\n  var Monotype = webfont.modules.Monotype,\n    Font = webfont.Font;\n    \n\n  Monotype.prototype.getScriptSrc = function(projectId, version) {\n    var p = this.domHelper_.getProtocol();\n    var api = (this.configuration_['api'] || 'fast.fonts.net/jsapi').replace(/^.*http(s?):(\\/\\/)?/, \"\");\n    return p + \"//\" + api + '/' + projectId + '.js' + (version ? '?v=' + version : '');\n  };\n\n  Monotype.prototype.load = function(onReady) {\n    var self = this;\n    var projectId = self.configuration_['projectId'];\n    var version = self.configuration_['version'];\n  \n      \n    function checkAndLoadIfDownloaded() {\n      if (loadWindow[Monotype.HOOK + projectId]) {\n        var mti_fnts = loadWindow[Monotype.HOOK + projectId](),\n            fonts = [],\n            fntVariation;\n\n        if (mti_fnts) {\n          for (var i = 0; i < mti_fnts.length; i++) {\n            var fnt = mti_fnts[i][\"fontfamily\"];\n            \n            //Check if font-style and font-weight is available\n            if (mti_fnts[i][\"fontStyle\"] != undefined && mti_fnts[i][\"fontWeight\"] != undefined) {\n              fntVariation = mti_fnts[i][\"fontStyle\"] + mti_fnts[i][\"fontWeight\"];\n              fonts.push(new Font(fnt, fntVariation));\n            } else {\n              fonts.push(new Font(fnt));\n            }\n          }\n        }\n        onReady(fonts);\n      } else {\n        setTimeout(function() {\n          checkAndLoadIfDownloaded();\n        }, 50);\n      }\n    }\n    if (projectId) {\n      var loadWindow = self.domHelper_.getLoadWindow();\n\n      var script = this.domHelper_.loadScript(self.getScriptSrc(projectId, version), function(err) {\n        if (err) {\n          onReady([]);\n        } else {\n          loadWindow[Monotype.CONFIGURATION+ projectId] = function() {\n           return  self.configuration_;\n          };\n            \n          checkAndLoadIfDownloaded();\n        }\n      });\n      script[\"id\"] = Monotype.SCRIPTID + projectId;\n    } else {\n      onReady([]);\n    }\n  };\n});","/home/travis/build/npmtest/node-npmtest-webfontloader/node_modules/webfontloader/src/modules/typekit.js":"goog.provide('webfont.modules.Typekit');\n\ngoog.require('webfont.Font');\n\n/**\n * @constructor\n * @implements {webfont.FontModule}\n */\nwebfont.modules.Typekit = function(domHelper, configuration) {\n  this.domHelper_ = domHelper;\n  this.configuration_ = configuration;\n};\n\n/**\n * @const\n * @type {string}\n */\nwebfont.modules.Typekit.NAME = 'typekit';\n\ngoog.scope(function () {\n  var Typekit = webfont.modules.Typekit,\n      Font = webfont.Font;\n\n  Typekit.prototype.getScriptSrc = function(kitId) {\n    var api = this.configuration_['api'] || 'https://use.typekit.net';\n    return api + '/' + kitId + '.js';\n  };\n\n  Typekit.prototype.load = function(onReady) {\n    var kitId = this.configuration_['id'];\n    var configuration = this.configuration_;\n    var loadWindow = this.domHelper_.getLoadWindow();\n    var that = this;\n\n    if (kitId) {\n      // Load the Typekit script. Once it is done loading we grab its configuration\n      // and use that to populate the fonts we should watch.\n      this.domHelper_.loadScript(this.getScriptSrc(kitId), function (err) {\n        if (err) {\n          onReady([]);\n        } else {\n          if (loadWindow['Typekit'] && loadWindow['Typekit']['config'] && loadWindow['Typekit']['config']['fn']) {\n            var fn = loadWindow['Typekit']['config']['fn'],\n                fonts = [];\n\n            for (var i = 0; i < fn.length; i += 2) {\n              var font = fn[i],\n                  variations = fn[i + 1];\n\n              for (var j = 0; j < variations.length; j++) {\n                fonts.push(new Font(font, variations[j]));\n              }\n            }\n\n            // Kick off font loading but disable font events so\n            // we don't duplicate font watching.\n            try {\n              loadWindow['Typekit']['load']({\n                'events': false,\n                'classes': false,\n                'async': true\n              });\n            } catch (e) {}\n\n            onReady(fonts);\n          }\n        }\n      }, 2000);\n    } else {\n      onReady([]);\n    }\n  };\n});\n"}